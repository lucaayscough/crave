#!/usr/bin/env python3

import os
import sys
import struct
import argparse
from pathlib import Path

def create_header(config, block_size, num_latents, sample_rate, num_tensors):
    """Create a binary header structure."""
    # Assuming header_t structure from C code:
    # size (uint64_t), config (uint64_t), block_size (uint32_t), 
    # num_latents (uint32_t), sample_rate (uint32_t), num_tensors (uint32_t)
    header_size = 8 + 8 + 4 + 4 + 4 + 4  # 32 bytes total
    
    header = struct.pack('<QQIIII', 
                        header_size,      # size
                        config,           # config
                        block_size,       # block_size
                        num_latents,      # num_latents
                        sample_rate,      # sample_rate
                        num_tensors)      # num_tensors
    return header

def pack_files(input_dir, output_file, config, block_size, num_latents, sample_rate):
    """Pack all .bin files from input_dir into output_file."""
    
    input_path = Path(input_dir)
    if not input_path.exists():
        print(f"Error: Input directory '{input_dir}' does not exist.", file=sys.stderr)
        return False
    
    if not input_path.is_dir():
        print(f"Error: '{input_dir}' is not a directory.", file=sys.stderr)
        return False
    
    # Find all .bin files
    bin_files = list(input_path.glob('*.bin'))
    
    if not bin_files:
        print(f"Warning: No .bin files found in '{input_dir}'")
    
    print(f"\ninput_dir set to:       {input_dir}")
    print(f"output_file set to:     {output_file}")
    print(f"config set to:          {config}")
    print(f"block_size set to:      {block_size}")
    print(f"num_latents set to:     {num_latents}")
    print(f"sample_rate set to:     {sample_rate}")
    print()
    
    try:
        with open(output_file, 'wb') as bin_file:
            # Write initial header (will be updated later with correct num_tensors)
            header = create_header(config, block_size, num_latents, sample_rate, 0)
            bin_file.write(header)
            
            num_tensors = 0
            
            # Process each .bin file
            for file_path in sorted(bin_files):  # Sort for consistent ordering
                try:
                    print(f"Packing: {file_path.name}")
                    
                    with open(file_path, 'rb') as f:
                        data = f.read()
                    
                    # Write file data to output
                    bin_file.write(data)
                    num_tensors += 1
                    
                except IOError as e:
                    print(f"Error reading file {file_path}: {e}", file=sys.stderr)
                    continue
            
            # Update header with correct num_tensors count
            bin_file.seek(0)
            header = create_header(config, block_size, num_latents, sample_rate, num_tensors)
            bin_file.write(header)
            print("Written header.")
            
    except IOError as e:
        print(f"Error writing to output file '{output_file}': {e}", file=sys.stderr)
        return False
    
    return True

def main():
    parser = argparse.ArgumentParser(
        description='Pack .bin files from a directory into a single binary file.',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('-i', '--input_dir', required=True,
                       help='Specify the input directory')
    parser.add_argument('-o', '--output_file', required=True,
                       help='Specify the output file for the packed .bin file')
    parser.add_argument('--config', required=True, type=int,
                       help='Unique identifier for the model architecture')
    parser.add_argument('--block_size', required=True, type=int,
                       help='The size of the input/output')
    parser.add_argument('--num_latents', required=True, type=int,
                       help='Number of latents generated by the encoder')
    parser.add_argument('--sample_rate', required=True, type=int,
                       help='Sample rate of the dataset the model was trained on')
    
    args = parser.parse_args()
    
    # Validate arguments
    if args.config < 0:
        print("Error: config must be non-negative", file=sys.stderr)
        return 1
    
    if args.block_size <= 0:
        print("Error: block_size must be positive", file=sys.stderr)
        return 1
    
    if args.num_latents <= 0:
        print("Error: num_latents must be positive", file=sys.stderr)
        return 1
    
    if args.sample_rate <= 0:
        print("Error: sample_rate must be positive", file=sys.stderr)
        return 1
    
    # Pack files
    success = pack_files(
        args.input_dir,
        args.output_file,
        args.config,
        args.block_size,
        args.num_latents,
        args.sample_rate
    )
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
